{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nexport var VideoService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(VideoService, _APIRequest);\n\n  var _super = _createSuper(VideoService);\n\n  function VideoService() {\n    _classCallCheck(this, VideoService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VideoService, [{\n    key: \"search\",\n    value: function search(query) {\n      return this.get(this.buildUrl('/admin/performer-assets/videos/search', query));\n    }\n  }, {\n    key: \"findById\",\n    value: function findById(id) {\n      return this.get(\"/admin/performer-assets/videos/\".concat(id, \"/view\"));\n    }\n  }, {\n    key: \"update\",\n    value: function update(id, files, payload, onProgress) {\n      return this.upload(\"/admin/performer-assets/videos/edit/\".concat(id), files, {\n        onProgress: onProgress,\n        customData: payload\n      });\n    }\n  }, {\n    key: \"uploadVideo\",\n    value: function uploadVideo(files, payload, onProgress) {\n      return this.upload('/admin/performer-assets/videos/upload', files, {\n        onProgress: onProgress,\n        customData: payload\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id) {\n      return this.del(\"/admin/performer-assets/videos/\".concat(id));\n    }\n  }]);\n\n  return VideoService;\n}(APIRequest);\nexport var videoService = new VideoService();","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/services/video.service.ts"],"names":["APIRequest","VideoService","query","get","buildUrl","id","files","payload","onProgress","upload","customData","del","videoService"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAOC,KAAP,EAAuC;AACrC,aAAO,KAAKC,GAAL,CACL,KAAKC,QAAL,CAAc,uCAAd,EAAuDF,KAAvD,CADK,CAAP;AAGD;AALH;AAAA;AAAA,WAOE,kBAASG,EAAT,EAAqB;AACnB,aAAO,KAAKF,GAAL,0CAA2CE,EAA3C,WAAP;AACD;AATH;AAAA;AAAA,WAWE,gBACEA,EADF,EAEEC,KAFF,EAGEC,OAHF,EAIEC,UAJF,EAKE;AACA,aAAO,KAAKC,MAAL,+CAAmDJ,EAAnD,GAAyDC,KAAzD,EAAgE;AACrEE,QAAAA,UAAU,EAAVA,UADqE;AAErEE,QAAAA,UAAU,EAAEH;AAFyD,OAAhE,CAAP;AAID;AArBH;AAAA;AAAA,WAuBE,qBACED,KADF,EAEEC,OAFF,EAGEC,UAHF,EAIE;AACA,aAAO,KAAKC,MAAL,CAAY,uCAAZ,EAAqDH,KAArD,EAA4D;AACjEE,QAAAA,UAAU,EAAVA,UADiE;AAEjEE,QAAAA,UAAU,EAAEH;AAFqD,OAA5D,CAAP;AAID;AAhCH;AAAA;AAAA,WAkCE,iBAAOF,EAAP,EAAmB;AACjB,aAAO,KAAKM,GAAL,0CAA2CN,EAA3C,EAAP;AACD;AApCH;;AAAA;AAAA,EAAkCL,UAAlC;AAuCA,OAAO,IAAMY,YAAY,GAAG,IAAIX,YAAJ,EAArB","sourcesContent":["import { APIRequest } from './api-request';\n\nexport class VideoService extends APIRequest {\n  search(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/admin/performer-assets/videos/search', query)\n    );\n  }\n\n  findById(id: string) {\n    return this.get(`/admin/performer-assets/videos/${id}/view`);\n  }\n\n  update(\n    id: string,\n    files: [{ fieldname: string; file: File }],\n    payload: any,\n    onProgress?: Function\n  ) {\n    return this.upload(`/admin/performer-assets/videos/edit/${id}`, files, {\n      onProgress,\n      customData: payload\n    });\n  }\n\n  uploadVideo(\n    files: [{ fieldname: string; file: File }],\n    payload: any,\n    onProgress?: Function\n  ) {\n    return this.upload('/admin/performer-assets/videos/upload', files, {\n      onProgress,\n      customData: payload\n    });\n  }\n\n  delete(id: string) {\n    return this.del(`/admin/performer-assets/videos/${id}`);\n  }\n}\n\nexport const videoService = new VideoService();\n"]},"metadata":{},"sourceType":"module"}