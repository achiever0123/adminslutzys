{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nimport { getGlobalConfig } from './config';\nexport const TOKEN = 'token';\nexport class APIRequest {\n  setAuthHeaderToken(token) {\n    APIRequest.token = token;\n  }\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n\n\n  parseJSON(response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n\n    return response.json();\n  }\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 401) {\n      if (false) {\n        Router.push('/login');\n      }\n\n      throw new Error('Forbidden in the action!');\n    } // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n\n\n    throw response.clone().json();\n  }\n\n  request(url, method, body, headers) {\n    const verb = (method || 'get').toUpperCase();\n\n    const updatedHeader = _objectSpread({\n      'Content-Type': 'application/json',\n      // TODO - check me\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null\n    }, headers || {});\n\n    const config = getGlobalConfig();\n    return fetch(isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    }).then(this.checkStatus).then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl, params) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params).map(k => {\n      if (Array.isArray(params[k])) {\n        return params[k].map(param => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`).join('&');\n      }\n\n      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n    }).join('&');\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url, headers) {\n    return this.request(url, 'get', null, headers);\n  }\n\n  post(url, data, headers) {\n    return this.request(url, 'post', data, headers);\n  }\n\n  put(url, data, headers) {\n    return this.request(url, 'put', data, headers);\n  }\n\n  del(url, data, headers) {\n    return this.request(url, 'delete', data, headers);\n  }\n\n  upload(url, files, options = {\n    onProgress() {},\n\n    method: 'POST'\n  }) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData();\n      files.forEach(f => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData && Object.keys(options.customData).forEach(fieldname => {\n        if (typeof options.customData[fieldname] !== 'undefined' && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);\n\n        if (typeof options.customData[fieldname] !== 'undefined' && Array.isArray(options.customData[fieldname])) {\n          if (options.customData[fieldname].length) {\n            for (let i = 0; i < options.customData[fieldname].length; i += 1) {\n              formData.append(fieldname, options.customData[fieldname][i]);\n            }\n          }\n        }\n      });\n      req.responseType = 'json';\n      req.open(options.method || 'POST', uploadUrl);\n      const token = APIRequest.token || cookie.get(TOKEN) || '';\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n}\n\n_defineProperty(APIRequest, \"token\", '');","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/services/api-request.ts"],"names":["fetch","Router","cookie","isUrl","getGlobalConfig","TOKEN","APIRequest","setAuthHeaderToken","token","parseJSON","response","status","json","checkStatus","push","Error","clone","request","url","method","body","headers","verb","toUpperCase","updatedHeader","Authorization","get","config","API_ENDPOINT","NEXT_PUBLIC_API_ENDPOINT","JSON","stringify","then","buildUrl","baseUrl","params","queryString","Object","keys","map","k","Array","isArray","param","encodeURIComponent","join","post","data","put","del","upload","files","options","onProgress","uploadUrl","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","event","lengthComputable","percentage","loaded","total","success","formData","FormData","forEach","f","append","fieldname","file","name","customData","length","i","responseType","open","setRequestHeader","send"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nimport { getGlobalConfig } from './config';\n\nexport interface IResponse<T> {\n  status: number;\n  data: T;\n}\n\nexport const TOKEN = 'token';\n\nexport abstract class APIRequest {\n  static token: string = '';\n\n  setAuthHeaderToken(token: string) {\n    APIRequest.token = token;\n  }\n\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n  private parseJSON(response: Response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n    return response.json();\n  }\n\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n  private checkStatus(response: Response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 401) {\n      if (process.browser) {\n        Router.push('/login');\n      }\n\n      throw new Error('Forbidden in the action!');\n    }\n\n    // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n    throw response.clone().json();\n  }\n\n  request(\n    url: string,\n    method?: string,\n    body?: any,\n    headers?: { [key: string]: string }\n  ): Promise<IResponse<any>> {\n    const verb = (method || 'get').toUpperCase();\n    const updatedHeader = {\n      'Content-Type': 'application/json',\n      // TODO - check me\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null,\n      ...headers || {}\n    };\n    const config = getGlobalConfig();\n    return fetch(isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl: string, params?: { [key: string]: any }) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params)\n      .map((k) => {\n        if (Array.isArray(params[k])) {\n          return params[k].map((param) => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`)\n            .join('&');\n        }\n        return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n      })\n      .join('&');\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url: string, headers?: { [key: string]: string }) {\n    return this.request(url, 'get', null, headers);\n  }\n\n  post(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'post', data, headers);\n  }\n\n  put(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'put', data, headers);\n  }\n\n  del(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'delete', data, headers);\n  }\n\n  upload(\n    url: string,\n    files: {\n      file: File;\n      fieldname: string;\n    }[],\n    options: {\n      onProgress: Function;\n      customData?: Record<any, any>;\n      method?: string;\n    } = {\n      onProgress() { },\n      method: 'POST'\n    }\n  ) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      files.forEach((f) => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData\n        && Object.keys(options.customData).forEach(\n          (fieldname) => {\n            if (typeof options.customData[fieldname] !== 'undefined' && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);\n            if (typeof options.customData[fieldname] !== 'undefined' && Array.isArray(options.customData[fieldname])) {\n              if (options.customData[fieldname].length) {\n                for (let i = 0; i < options.customData[fieldname].length; i += 1) {\n                  formData.append(fieldname, options.customData[fieldname][i]);\n                }\n              }\n            }\n          }\n        );\n\n      req.responseType = 'json';\n      req.open(options.method || 'POST', uploadUrl);\n\n      const token = APIRequest.token || cookie.get(TOKEN) || '';\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}