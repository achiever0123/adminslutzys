{"ast":null,"code":"/* eslint-disable consistent-return */\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { resetUser } from '@redux/user/actions';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport { login, loginSuccess, logout, loginFail, logoutSuccess } from './actions';\nconst authSagas = [{\n  on: login,\n\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.login(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setToken(resp.token);\n      const userResp = (yield userService.me()).data;\n\n      if (userResp.roles.indexOf('admin') === -1) {\n        message.error('You don\\'t have permission to login to this page!');\n        return yield logout();\n      }\n\n      yield put(updateCurrentUser(userResp));\n      yield put(loginSuccess());\n      Router.push('/');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: logout,\n\n  *worker() {\n    try {\n      yield authService.removeToken();\n      yield put(resetUser());\n      yield put(logoutSuccess()); // yield put(resetAppState());\n      // TODO - should use a better way?\n\n      Router.push('/auth/login');\n    } catch (e) {// message.error('Something went wrong!');\n    }\n  }\n\n}];\nexport default flatten(createSagas(authSagas));","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/auth/sagas.ts"],"names":["flatten","put","createSagas","Router","authService","userService","resetUser","message","updateCurrentUser","login","loginSuccess","logout","loginFail","logoutSuccess","authSagas","on","worker","data","payload","resp","setToken","token","userResp","me","roles","indexOf","error","push","e","Promise","resolve","removeToken"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,cAAzC;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SACEC,KADF,EACSC,YADT,EACuBC,MADvB,EAC+BC,SAD/B,EAC0CC,aAD1C,QAEO,WAFP;AAIA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,EAAE,EAAEN,KADN;;AAEE,GAAEO,MAAF,CAASC,IAAT,EAAoB;AAClB,QAAI;AACF,YAAMC,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,YAAMC,IAAI,GAAG,CAAC,MAAMf,WAAW,CAACK,KAAZ,CAAkBS,OAAlB,CAAP,EAAmCD,IAAhD,CAFE,CAGF;;AACA,YAAMb,WAAW,CAACgB,QAAZ,CAAqBD,IAAI,CAACE,KAA1B,CAAN;AACA,YAAMC,QAAQ,GAAG,CAAC,MAAMjB,WAAW,CAACkB,EAAZ,EAAP,EAAyBN,IAA1C;;AACA,UAAIK,QAAQ,CAACE,KAAT,CAAeC,OAAf,CAAuB,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC1ClB,QAAAA,OAAO,CAACmB,KAAR,CAAc,mDAAd;AACA,eAAO,MAAMf,MAAM,EAAnB;AACD;;AACD,YAAMV,GAAG,CAACO,iBAAiB,CAACc,QAAD,CAAlB,CAAT;AACA,YAAMrB,GAAG,CAACS,YAAY,EAAb,CAAT;AACAP,MAAAA,MAAM,CAACwB,IAAP,CAAY,GAAZ;AACD,KAbD,CAaE,OAAOC,CAAP,EAAU;AACV,YAAMF,KAAK,GAAG,MAAMG,OAAO,CAACC,OAAR,CAAgBF,CAAhB,CAApB;AACA,YAAM3B,GAAG,CAACW,SAAS,CAACc,KAAD,CAAV,CAAT;AACD;AACF;;AApBH,CADgB,EAuBhB;AACEX,EAAAA,EAAE,EAAEJ,MADN;;AAEE,GAAEK,MAAF,GAAW;AACT,QAAI;AACF,YAAMZ,WAAW,CAAC2B,WAAZ,EAAN;AACA,YAAM9B,GAAG,CAACK,SAAS,EAAV,CAAT;AACA,YAAML,GAAG,CAACY,aAAa,EAAd,CAAT,CAHE,CAIF;AACA;;AACAV,MAAAA,MAAM,CAACwB,IAAP,CAAY,aAAZ;AACD,KAPD,CAOE,OAAOC,CAAP,EAAU,CACV;AACD;AACF;;AAbH,CAvBgB,CAAlB;AAwCA,eAAe5B,OAAO,CAACE,WAAW,CAACY,SAAD,CAAZ,CAAtB","sourcesContent":["/* eslint-disable consistent-return */\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { ILogin } from 'src/interfaces';\nimport { resetUser } from '@redux/user/actions';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  login, loginSuccess, logout, loginFail, logoutSuccess\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setToken(resp.token);\n        const userResp = (yield userService.me()).data;\n        if (userResp.roles.indexOf('admin') === -1) {\n          message.error('You don\\'t have permission to login to this page!');\n          return yield logout();\n        }\n        yield put(updateCurrentUser(userResp));\n        yield put(loginSuccess());\n        Router.push('/');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      try {\n        yield authService.removeToken();\n        yield put(resetUser());\n        yield put(logoutSuccess());\n        // yield put(resetAppState());\n        // TODO - should use a better way?\n        Router.push('/auth/login');\n      } catch (e) {\n        // message.error('Something went wrong!');\n      }\n    }\n  }\n];\n\nexport default flatten(createSagas(authSagas));\n"]},"metadata":{},"sourceType":"module"}