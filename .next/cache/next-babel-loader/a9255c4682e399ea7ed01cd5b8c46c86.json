{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/* eslint-disable consistent-return */\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { resetUser } from '@redux/user/actions';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport { login, loginSuccess, logout, loginFail, logoutSuccess } from './actions';\nvar authSagas = [{\n  on: login,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, userResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            payload = data.payload;\n            _context.next = 4;\n            return authService.login(payload);\n\n          case 4:\n            resp = _context.sent.data;\n            _context.next = 7;\n            return authService.setToken(resp.token);\n\n          case 7:\n            _context.next = 9;\n            return userService.me();\n\n          case 9:\n            userResp = _context.sent.data;\n\n            if (!(userResp.roles.indexOf('admin') === -1)) {\n              _context.next = 15;\n              break;\n            }\n\n            message.error('You don\\'t have permission to login to this page!');\n            _context.next = 14;\n            return logout();\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.next = 17;\n            return put(updateCurrentUser(userResp));\n\n          case 17:\n            _context.next = 19;\n            return put(loginSuccess());\n\n          case 19:\n            Router.push('/');\n            _context.next = 29;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 26;\n            return Promise.resolve(_context.t0);\n\n          case 26:\n            error = _context.sent;\n            _context.next = 29;\n            return put(loginFail(error));\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 22]]);\n  })\n}, {\n  on: logout,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return authService.removeToken();\n\n          case 3:\n            _context2.next = 5;\n            return put(resetUser());\n\n          case 5:\n            _context2.next = 7;\n            return put(logoutSuccess());\n\n          case 7:\n            // yield put(resetAppState());\n            // TODO - should use a better way?\n            Router.push('/auth/login');\n            _context2.next = 12;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten(createSagas(authSagas));","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/auth/sagas.ts"],"names":["flatten","put","createSagas","Router","authService","userService","resetUser","message","updateCurrentUser","login","loginSuccess","logout","loginFail","logoutSuccess","authSagas","on","worker","data","payload","resp","setToken","token","me","userResp","roles","indexOf","error","push","Promise","resolve","removeToken"],"mappings":";;AAAA;AACA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,cAAzC;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SACEC,KADF,EACSC,YADT,EACuBC,MADvB,EAC+BC,SAD/B,EAC0CC,aAD1C,QAEO,WAFP;AAIA,IAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,EAAE,EAAEN,KADN;AAEIO,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIYC,YAAAA,OAJZ,GAIsBD,IAAI,CAACC,OAJ3B;AAAA;AAKoB,mBAAMd,WAAW,CAACK,KAAZ,CAAkBS,OAAlB,CAAN;;AALpB;AAKYC,YAAAA,IALZ,iBAKsDF,IALtD;AAAA;AAOM,mBAAMb,WAAW,CAACgB,QAAZ,CAAqBD,IAAI,CAACE,KAA1B,CAAN;;AAPN;AAAA;AAQwB,mBAAMhB,WAAW,CAACiB,EAAZ,EAAN;;AARxB;AAQYC,YAAAA,QARZ,iBAQgDN,IARhD;;AAAA,kBASUM,QAAQ,CAACC,KAAT,CAAeC,OAAf,CAAuB,OAAvB,MAAoC,CAAC,CAT/C;AAAA;AAAA;AAAA;;AAUQlB,YAAAA,OAAO,CAACmB,KAAR,CAAc,mDAAd;AAVR;AAWe,mBAAMf,MAAM,EAAZ;;AAXf;AAAA;;AAAA;AAAA;AAaM,mBAAMV,GAAG,CAACO,iBAAiB,CAACe,QAAD,CAAlB,CAAT;;AAbN;AAAA;AAcM,mBAAMtB,GAAG,CAACS,YAAY,EAAb,CAAT;;AAdN;AAeMP,YAAAA,MAAM,CAACwB,IAAP,CAAY,GAAZ;AAfN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBoB,mBAAMC,OAAO,CAACC,OAAR,aAAN;;AAjBpB;AAiBYH,YAAAA,KAjBZ;AAAA;AAkBM,mBAAMzB,GAAG,CAACW,SAAS,CAACc,KAAD,CAAV,CAAT;;AAlBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADgB,EAuBhB;AACEX,EAAAA,EAAE,EAAEJ,MADN;AAEIK,EAAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMZ,WAAW,CAAC0B,WAAZ,EAAN;;AAJN;AAAA;AAKM,mBAAM7B,GAAG,CAACK,SAAS,EAAV,CAAT;;AALN;AAAA;AAMM,mBAAML,GAAG,CAACY,aAAa,EAAd,CAAT;;AANN;AAOM;AACA;AACAV,YAAAA,MAAM,CAACwB,IAAP,CAAY,aAAZ;AATN;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAvBgB,CAAlB;AAwCA,eAAe3B,OAAO,CAACE,WAAW,CAACY,SAAD,CAAZ,CAAtB","sourcesContent":["/* eslint-disable consistent-return */\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { ILogin } from 'src/interfaces';\nimport { resetUser } from '@redux/user/actions';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  login, loginSuccess, logout, loginFail, logoutSuccess\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setToken(resp.token);\n        const userResp = (yield userService.me()).data;\n        if (userResp.roles.indexOf('admin') === -1) {\n          message.error('You don\\'t have permission to login to this page!');\n          return yield logout();\n        }\n        yield put(updateCurrentUser(userResp));\n        yield put(loginSuccess());\n        Router.push('/');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      try {\n        yield authService.removeToken();\n        yield put(resetUser());\n        yield put(logoutSuccess());\n        // yield put(resetAppState());\n        // TODO - should use a better way?\n        Router.push('/auth/login');\n      } catch (e) {\n        // message.error('Something went wrong!');\n      }\n    }\n  }\n];\n\nexport default flatten(createSagas(authSagas));\n"]},"metadata":{},"sourceType":"module"}