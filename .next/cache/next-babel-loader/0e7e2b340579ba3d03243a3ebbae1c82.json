{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService } from '@services/index';\nimport { updateUser, setUpdating, setUpdateStatus, updateCurrentUser } from './actions';\nvar userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdating(true));\n\n          case 3:\n            _context.next = 5;\n            return userService.update(data.payload._id, data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateCurrentUser(updated.data));\n\n          case 8:\n            _context.next = 10;\n            return put(setUpdateStatus(true));\n\n          case 10:\n            _context.next = 14;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 14:\n            _context.prev = 14;\n            _context.next = 17;\n            return put(setUpdateStatus(false));\n\n          case 17:\n            _context.next = 19;\n            return put(setUpdating(false));\n\n          case 19:\n            return _context.finish(14);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 12, 14, 20]]);\n  })\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","updateUser","setUpdating","setUpdateStatus","updateCurrentUser","userSagas","on","worker","data","update","payload","_id","updated"],"mappings":";AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,eAHF,EAIEC,iBAJF,QAKO,WALP;AAOA,IAAMC,SAAS,GAAG,CAChB;AACA;AACEC,EAAAA,EAAE,EAAEL,UADN;AAEIM,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMV,GAAG,CAACI,WAAW,CAAC,IAAD,CAAZ,CAAT;;AAJN;AAAA;AAKsB,mBAAMF,WAAW,CAACS,MAAZ,CAAmBD,IAAI,CAACE,OAAL,CAAaC,GAAhC,EAAqCH,IAAI,CAACE,OAA1C,CAAN;;AALtB;AAKYE,YAAAA,OALZ;AAAA;AAMM,mBAAMd,GAAG,CAACM,iBAAiB,CAACQ,OAAO,CAACJ,IAAT,CAAlB,CAAT;;AANN;AAAA;AAOM,mBAAMV,GAAG,CAACK,eAAe,CAAC,IAAD,CAAhB,CAAT;;AAPN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYM,mBAAML,GAAG,CAACK,eAAe,CAAC,KAAD,CAAhB,CAAT;;AAZN;AAAA;AAaM,mBAAML,GAAG,CAACI,WAAW,CAAC,KAAD,CAAZ,CAAT;;AAbN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFgB,CAAlB;AAqBA,eAAeL,OAAO,CAAC,CAACE,WAAW,CAACM,SAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  updateUser,\n  setUpdating,\n  setUpdateStatus,\n  updateCurrentUser\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield userService.update(data.payload._id, data.payload);\n        yield put(updateCurrentUser(updated.data));\n        yield put(setUpdateStatus(true));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n      } finally {\n        yield put(setUpdateStatus(false));\n        yield put(setUpdating(false));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}