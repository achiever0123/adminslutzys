{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService } from '@services/index';\nimport { updateUser, setUpdating, setUpdateStatus, updateCurrentUser } from './actions';\nconst userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield userService.update(data.payload._id, data.payload);\n      yield put(updateCurrentUser(updated.data));\n      yield put(setUpdateStatus(true)); // if this is current user, reload user info?\n    } catch (e) {// TODO - alert error\n    } finally {\n      yield put(setUpdateStatus(false));\n      yield put(setUpdating(false));\n    }\n  }\n\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","updateUser","setUpdating","setUpdateStatus","updateCurrentUser","userSagas","on","worker","data","updated","update","payload","_id","e"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,eAHF,EAIEC,iBAJF,QAKO,WALP;AAOA,MAAMC,SAAS,GAAG,CAChB;AACA;AACEC,EAAAA,EAAE,EAAEL,UADN;;AAEE,GAAEM,MAAF,CAASC,IAAT,EAAkC;AAChC,QAAI;AACF,YAAMV,GAAG,CAACI,WAAW,CAAC,IAAD,CAAZ,CAAT;AACA,YAAMO,OAAO,GAAG,MAAMT,WAAW,CAACU,MAAZ,CAAmBF,IAAI,CAACG,OAAL,CAAaC,GAAhC,EAAqCJ,IAAI,CAACG,OAA1C,CAAtB;AACA,YAAMb,GAAG,CAACM,iBAAiB,CAACK,OAAO,CAACD,IAAT,CAAlB,CAAT;AACA,YAAMV,GAAG,CAACK,eAAe,CAAC,IAAD,CAAhB,CAAT,CAJE,CAKF;AACD,KAND,CAME,OAAOU,CAAP,EAAU,CACV;AACD,KARD,SAQU;AACR,YAAMf,GAAG,CAACK,eAAe,CAAC,KAAD,CAAhB,CAAT;AACA,YAAML,GAAG,CAACI,WAAW,CAAC,KAAD,CAAZ,CAAT;AACD;AACF;;AAfH,CAFgB,CAAlB;AAqBA,eAAeL,OAAO,CAAC,CAACE,WAAW,CAACM,SAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  updateUser,\n  setUpdating,\n  setUpdateStatus,\n  updateCurrentUser\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield userService.update(data.payload._id, data.payload);\n        yield put(updateCurrentUser(updated.data));\n        yield put(setUpdateStatus(true));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n      } finally {\n        yield put(setUpdateStatus(false));\n        yield put(setUpdating(false));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}