{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateCurrentUser, updateUserSuccess, setUpdating, updateCurrentUserAvatar, setReducer, setUpdateStatus, resetUser } from './actions';\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/user.png',\n    name: '',\n    email: ''\n  },\n  updating: false,\n  updateSuccess: false\n};\nconst userReducers = [{\n  on: updateCurrentUser,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n\n}, {\n  on: updateCurrentUserAvatar,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n\n}, {\n  on: updateUserSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatedUser: data.payload\n    });\n  }\n\n}, {\n  on: setUpdating,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: data.payload\n    });\n  }\n\n}, {\n  on: setUpdateStatus,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: data.payload\n    });\n  }\n\n}, {\n  on: setReducer,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      [data.payload.field]: data.payload.data\n    });\n  }\n\n}, {\n  on: resetUser,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: {\n        _id: null,\n        avatar: '/user.png',\n        name: '',\n        email: ''\n      },\n      updating: false,\n      updateSuccess: false\n    });\n  }\n\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/user/reducers.ts"],"names":["merge","createReducers","updateCurrentUser","updateUserSuccess","setUpdating","updateCurrentUserAvatar","setReducer","setUpdateStatus","resetUser","initialState","current","_id","avatar","name","email","updating","updateSuccess","userReducers","on","reducer","state","data","payload","updatedUser","field"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,uBAJF,EAKEC,UALF,EAMEC,eANF,EAOEC,SAPF,QAQO,WARP;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,IADE;AAEPC,IAAAA,MAAM,EAAE,WAFD;AAGPC,IAAAA,IAAI,EAAE,EAHC;AAIPC,IAAAA,KAAK,EAAE;AAJA,GADU;AAOnBC,EAAAA,QAAQ,EAAE,KAPS;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAArB;AAWA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEhB,iBADN;;AAEEiB,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAAwB;AAC7B,2CACKD,KADL;AAEEV,MAAAA,OAAO,EAAEW,IAAI,CAACC;AAFhB;AAID;;AAPH,CADmB,EAUnB;AACEJ,EAAAA,EAAE,EAAEb,uBADN;;AAEEc,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAAwB;AAC7B,2CACKD,KADL;AAEEV,MAAAA,OAAO,kCACFU,KAAK,CAACV,OADJ;AAELE,QAAAA,MAAM,EAAES,IAAI,CAACC;AAFR;AAFT;AAOD;;AAVH,CAVmB,EAsBnB;AACEJ,EAAAA,EAAE,EAAEf,iBADN;;AAEEgB,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAAwC;AAC7C,2CACKD,KADL;AAEEG,MAAAA,WAAW,EAAEF,IAAI,CAACC;AAFpB;AAID;;AAPH,CAtBmB,EA+BnB;AACEJ,EAAAA,EAAE,EAAEd,WADN;;AAEEe,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAA0C;AAC/C,2CACKD,KADL;AAEEL,MAAAA,QAAQ,EAAEM,IAAI,CAACC;AAFjB;AAID;;AAPH,CA/BmB,EAwCnB;AACEJ,EAAAA,EAAE,EAAEX,eADN;;AAEEY,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAA0C;AAC/C,2CACKD,KADL;AAEEJ,MAAAA,aAAa,EAAEK,IAAI,CAACC;AAFtB;AAID;;AAPH,CAxCmB,EAiDnB;AACEJ,EAAAA,EAAE,EAAEZ,UADN;;AAEEa,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAA2D;AAChE,2CACKD,KADL;AAEE,OAACC,IAAI,CAACC,OAAL,CAAaE,KAAd,GAAsBH,IAAI,CAACC,OAAL,CAAaD;AAFrC;AAID;;AAPH,CAjDmB,EA0DnB;AACEH,EAAAA,EAAE,EAAEV,SADN;;AAEEW,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,2CACKA,KADL;AAEEV,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAE,IADE;AAEPC,QAAAA,MAAM,EAAE,WAFD;AAGPC,QAAAA,IAAI,EAAE,EAHC;AAIPC,QAAAA,KAAK,EAAE;AAJA,OAFX;AAQEC,MAAAA,QAAQ,EAAE,KARZ;AASEC,MAAAA,aAAa,EAAE;AATjB;AAWD;;AAdH,CA1DmB,CAArB;AA4EA,eAAehB,KAAK,CAAC,EAAD,EAAKC,cAAc,CAAC,MAAD,EAAS,CAACgB,YAAD,CAAT,EAAyBR,YAAzB,CAAnB,CAApB","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction, IUser, IReducerFieldUpdate } from 'src/interfaces';\nimport {\n  updateCurrentUser,\n  updateUserSuccess,\n  setUpdating,\n  updateCurrentUserAvatar,\n  setReducer,\n  setUpdateStatus,\n  resetUser\n} from './actions';\n\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/user.png',\n    name: '',\n    email: ''\n  },\n  updating: false,\n  updateSuccess: false\n};\n\nconst userReducers = [\n  {\n    on: updateCurrentUser,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: data.payload\n      };\n    }\n  },\n  {\n    on: updateCurrentUserAvatar,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          avatar: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateUserSuccess,\n    reducer(state: any, data: IReduxAction<IUser>) {\n      return {\n        ...state,\n        updatedUser: data.payload\n      };\n    }\n  },\n  {\n    on: setUpdating,\n    reducer(state: any, data: IReduxAction<boolean>) {\n      return {\n        ...state,\n        updating: data.payload\n      };\n    }\n  },\n  {\n    on: setUpdateStatus,\n    reducer(state: any, data: IReduxAction<boolean>) {\n      return {\n        ...state,\n        updateSuccess: data.payload\n      };\n    }\n  },\n  {\n    on: setReducer,\n    reducer(state: any, data: IReduxAction<IReducerFieldUpdate<any>>) {\n      return {\n        ...state,\n        [data.payload.field]: data.payload.data\n      };\n    }\n  },\n  {\n    on: resetUser,\n    reducer(state: any) {\n      return {\n        ...state,\n        current: {\n          _id: null,\n          avatar: '/user.png',\n          name: '',\n          email: ''\n        },\n        updating: false,\n        updateSuccess: false\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('user', [userReducers], initialState));\n"]},"metadata":{},"sourceType":"module"}