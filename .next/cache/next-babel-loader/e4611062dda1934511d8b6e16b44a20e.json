{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport storeHolder from '@lib/storeHolder';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    return applyMiddleware(...middleware);\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  storeHolder.setStore(store);\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/redux/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","storeHolder","rootReducer","rootSaga","bindMiddleware","middleware","configureStore","initialState","sagaMiddleware","store","sagaTask","run","setStore"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAqB;AAC1C,YAA2C;AACzC,WAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACD;;AACD,SAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACD,CALD;;AAOA,SAASC,cAAT,CAAwBC,YAAxB,EAA2C;AACzC,QAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AACA,QAAMS,KAAK,GAAGV,WAAW,CAACG,WAAD,EAAcK,YAAd,EAA4BH,cAAc,CAAC,CAACI,cAAD,CAAD,CAA1C,CAAzB;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBR,QAAnB,CAAjB;AAEAF,EAAAA,WAAW,CAACW,QAAZ,CAAqBH,KAArB;AAEA,SAAOA,KAAP;AACD;;AAED,eAAeH,cAAf","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport storeHolder from '@lib/storeHolder';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst bindMiddleware = (middleware: any) => {\n  if (process.env.NODE_ENV !== 'production') {\n    return applyMiddleware(...middleware);\n  }\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState: any) {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware])) as any;\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  storeHolder.setStore(store);\n\n  return store;\n}\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}