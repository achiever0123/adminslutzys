{"ast":null,"code":"import { getGlobalConfig } from 'src/services';\nimport { APIRequest } from './api-request';\nexport class UserService extends APIRequest {\n  me(headers) {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/users', payload);\n  }\n\n  create(payload) {\n    return this.post('/admin/users', payload);\n  }\n\n  update(id, payload) {\n    return this.put(`/admin/users/${id}`, payload);\n  }\n\n  getAvatarUploadUrl(userId) {\n    if (userId) {\n      return `${getGlobalConfig().NEXT_PUBLIC_API_ENDPOINT}/admin/users/${userId}/avatar/upload`;\n    }\n\n    return `${getGlobalConfig().NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  uploadAvatarUser(file, userId) {\n    return this.upload(`/admin/users/${userId}/avatar/upload`, [{\n      file,\n      fieldname: 'avatar'\n    }]);\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/admin/users/search', query));\n  }\n\n  findById(id) {\n    return this.get(`/admin/users/${id}/view`);\n  }\n\n}\nexport const userService = new UserService();","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/src/services/user.service.ts"],"names":["getGlobalConfig","APIRequest","UserService","me","headers","get","updateMe","payload","put","create","post","update","id","getAvatarUploadUrl","userId","NEXT_PUBLIC_API_ENDPOINT","uploadAvatarUser","file","upload","fieldname","search","query","buildUrl","findById","userService"],"mappings":"AACA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,UAAT,QAAsC,eAAtC;AAEA,OAAO,MAAMC,WAAN,SAA0BD,UAA1B,CAAqC;AAC1CE,EAAAA,EAAE,CAACC,OAAD,EAAiE;AACjE,WAAO,KAAKC,GAAL,CAAS,WAAT,EAAsBD,OAAtB,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,OAAD,EAAe;AACrB,WAAO,KAAKC,GAAL,CAAS,QAAT,EAAmBD,OAAnB,CAAP;AACD;;AAEDE,EAAAA,MAAM,CAACF,OAAD,EAAe;AACnB,WAAO,KAAKG,IAAL,CAAU,cAAV,EAA0BH,OAA1B,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAACC,EAAD,EAAaL,OAAb,EAA2B;AAC/B,WAAO,KAAKC,GAAL,CAAU,gBAAeI,EAAG,EAA5B,EAA+BL,OAA/B,CAAP;AACD;;AAEDM,EAAAA,kBAAkB,CAACC,MAAD,EAAkB;AAClC,QAAIA,MAAJ,EAAY;AACV,aAAQ,GAAEd,eAAe,GAAGe,wBAAyB,gBAAeD,MAAO,gBAA3E;AACD;;AACD,WAAQ,GAAEd,eAAe,GAAGe,wBAAyB,sBAArD;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,IAAD,EAAaH,MAAb,EAA8B;AAC5C,WAAO,KAAKI,MAAL,CAAa,gBAAeJ,MAAO,gBAAnC,EAAoD,CACzD;AAAEG,MAAAA,IAAF;AAAQE,MAAAA,SAAS,EAAE;AAAnB,KADyD,CAApD,CAAP;AAGD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAiC;AACrC,WAAO,KAAKhB,GAAL,CAAS,KAAKiB,QAAL,CAAc,qBAAd,EAAqCD,KAArC,CAAT,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACX,EAAD,EAAa;AACnB,WAAO,KAAKP,GAAL,CAAU,gBAAeO,EAAG,OAA5B,CAAP;AACD;;AApCyC;AAuC5C,OAAO,MAAMY,WAAW,GAAG,IAAItB,WAAJ,EAApB","sourcesContent":["import { IUser } from 'src/interfaces';\nimport { getGlobalConfig } from 'src/services';\nimport { APIRequest, IResponse } from './api-request';\n\nexport class UserService extends APIRequest {\n  me(headers?: { [key: string]: string }): Promise<IResponse<IUser>> {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload: any) {\n    return this.put('/users', payload);\n  }\n\n  create(payload: any) {\n    return this.post('/admin/users', payload);\n  }\n\n  update(id: string, payload: any) {\n    return this.put(`/admin/users/${id}`, payload);\n  }\n\n  getAvatarUploadUrl(userId?: string) {\n    if (userId) {\n      return `${getGlobalConfig().NEXT_PUBLIC_API_ENDPOINT}/admin/users/${userId}/avatar/upload`;\n    }\n    return `${getGlobalConfig().NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  uploadAvatarUser(file: File, userId?: string) {\n    return this.upload(`/admin/users/${userId}/avatar/upload`, [\n      { file, fieldname: 'avatar' }\n    ]);\n  }\n\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/admin/users/search', query));\n  }\n\n  findById(id: string) {\n    return this.get(`/admin/users/${id}/view`);\n  }\n}\n\nexport const userService = new UserService();\n"]},"metadata":{},"sourceType":"module"}