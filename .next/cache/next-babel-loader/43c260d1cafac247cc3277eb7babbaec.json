{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport BaseLayout from '@layouts/base-layout';\nimport { authService, userService, setGlobalConfig, settingService } from '@services/index';\nimport Router from 'next/router';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport Head from 'next/head';\nimport '../style/index.less';\n\nfunction redirectLogin(ctx) {\n  if (true) {\n    authService.removeToken();\n    Router.push('/auth/login');\n    return;\n  } // fix for production build\n\n\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    Location: '/auth/login'\n  });\n  ctx.res.end && ctx.res.end();\n}\n\nfunction auth(_x) {\n  return _auth.apply(this, arguments);\n}\n\nfunction _auth() {\n  _auth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var store, state, _nextCookie, token, user;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            store = ctx.store;\n            state = store.getState();\n\n            if (!(state.auth && state.auth.loggedIn)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            // TODO - move to a service\n            _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n\n            if (token) {\n              _context2.next = 9;\n              break;\n            }\n\n            // log out and redirect to login page\n            // TODO - reset app state?\n            redirectLogin(ctx);\n            return _context2.abrupt(\"return\");\n\n          case 9:\n            authService.setAuthHeaderToken(token);\n            _context2.next = 12;\n            return userService.me({\n              Authorization: token\n            });\n\n          case 12:\n            user = _context2.sent;\n\n            if (!(user.data && !user.data.roles.includes('admin'))) {\n              _context2.next = 16;\n              break;\n            }\n\n            redirectLogin(ctx);\n            return _context2.abrupt(\"return\");\n\n          case 16:\n            store.dispatch(loginSuccess());\n            store.dispatch(updateCurrentUser(user.data));\n            _context2.next = 23;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](0);\n            redirectLogin(ctx);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 20]]);\n  }));\n  return _auth.apply(this, arguments);\n}\n\nfunction updateSettingsStore(_x2, _x3) {\n  return _updateSettingsStore.apply(this, arguments);\n}\n\nfunction _updateSettingsStore() {\n  _updateSettingsStore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx, settings) {\n    var store;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            store = ctx.store;\n            store.dispatch(updateUIValue({\n              logo: settings.logoUrl,\n              siteName: settings.siteName\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _updateSettingsStore.apply(this, arguments);\n}\n\nvar publicConfig = {};\n\nvar Application = /*#__PURE__*/function (_App) {\n  _inherits(Application, _App);\n\n  var _super = _createSuper(Application);\n\n  function Application(props) {\n    var _this;\n\n    _classCallCheck(this, Application);\n\n    _this = _super.call(this, props);\n    setGlobalConfig(_this.props.config);\n    return _this;\n  }\n\n  _createClass(Application, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store,\n          settings = _this$props.settings;\n      var layout = Component.layout;\n      return __jsx(Provider, {\n        store: store\n      }, __jsx(Head, null, __jsx(\"title\", null, settings === null || settings === void 0 ? void 0 : settings.siteName), __jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1, maximum-scale=1\"\n      })), __jsx(BaseLayout, {\n        layout: layout\n      }, __jsx(Component, pageProps)));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: // TODO - consider if we need to use get static props in children component instead?\n    // or check in render?\n    function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var Component, ctx, dotenv, myEnv, settings, resp, pageProps;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Component = _ref.Component, ctx = _ref.ctx;\n\n                // load configuration from ENV and put to config\n                if (!true) {\n                  // eslint-disable-next-line global-require\n                  dotenv = require('dotenv');\n                  myEnv = dotenv.config().parsed; // publish to server config with app\n\n                  setGlobalConfig(myEnv); // load public config and api-endpoint?\n\n                  Object.keys(myEnv).forEach(function (key) {\n                    if (key.indexOf('NEXT_PUBLIC_') === 0) {\n                      publicConfig[key] = myEnv[key];\n                    }\n                  });\n                } // won't check auth for un-authenticated page such as login, register\n                // use static field in the component\n\n\n                if (!(Component.authenticate !== false)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return auth(ctx);\n\n              case 5:\n                settings = {};\n\n                if (true) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 9;\n                return settingService[\"public\"]();\n\n              case 9:\n                resp = _context.sent;\n                // TODO encrypt, decypt header script, footer script or other info if needed\n                settings = resp === null || resp === void 0 ? void 0 : resp.data;\n                _context.t0 = settings;\n\n                if (!_context.t0) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 15;\n                return updateSettingsStore(ctx, settings);\n\n              case 15:\n                pageProps = {};\n\n                if (!Component.getInitialProps) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 19;\n                return Component.getInitialProps({\n                  ctx: ctx\n                });\n\n              case 19:\n                pageProps = _context.sent;\n\n              case 20:\n                return _context.abrupt(\"return\", {\n                  settings: settings,\n                  pageProps: pageProps,\n                  layout: Component.layout,\n                  config: publicConfig\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x4) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Application;\n}(App);\n\nexport default _c = withReduxSaga(Application);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/pages/_app.tsx"],"names":["App","React","Provider","nextCookie","withReduxSaga","BaseLayout","authService","userService","setGlobalConfig","settingService","Router","loginSuccess","updateCurrentUser","updateUIValue","Head","redirectLogin","ctx","removeToken","push","res","clearCookie","writeHead","Location","end","auth","store","state","getState","loggedIn","token","setAuthHeaderToken","me","Authorization","user","data","roles","includes","dispatch","updateSettingsStore","settings","logo","logoUrl","siteName","publicConfig","Application","props","config","Component","pageProps","layout","dotenv","require","myEnv","parsed","Object","keys","forEach","key","indexOf","authenticate","resp","getInitialProps"],"mappings":"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","sourcesContent":["import App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport { Store } from 'redux';\nimport BaseLayout from '@layouts/base-layout';\nimport {\n  authService, userService, setGlobalConfig, settingService\n} from '@services/index';\nimport Router from 'next/router';\nimport { NextPageContext } from 'next';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport Head from 'next/head';\nimport '../style/index.less';\n\nfunction redirectLogin(ctx: any) {\n  if (process.browser) {\n    authService.removeToken();\n    Router.push('/auth/login');\n    return;\n  }\n\n  // fix for production build\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/auth/login' });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(ctx: NextPageContext) {\n  try {\n    const { store } = ctx;\n    const state = store.getState();\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    }\n    // TODO - move to a service\n    const { token } = nextCookie(ctx);\n    if (!token) {\n      // log out and redirect to login page\n      // TODO - reset app state?\n      redirectLogin(ctx);\n      return;\n    }\n    authService.setAuthHeaderToken(token);\n    const user = await userService.me({\n      Authorization: token\n    });\n    // TODO - check permission\n    if (user.data && !user.data.roles.includes('admin')) {\n      redirectLogin(ctx);\n      return;\n    }\n    store.dispatch(loginSuccess());\n    store.dispatch(updateCurrentUser(user.data));\n  } catch (e) {\n    redirectLogin(ctx);\n  }\n}\n\nasync function updateSettingsStore(ctx: NextPageContext, settings) {\n  const { store } = ctx;\n  store.dispatch(\n    updateUIValue({\n      logo: settings.logoUrl,\n      siteName: settings.siteName\n    })\n  );\n}\n\ninterface AppComponent extends NextPageContext {\n  layout: string;\n}\n\ninterface IApp {\n  store: Store;\n  layout: string;\n  authenticate: boolean;\n  Component: AppComponent;\n  settings: any;\n  config: any;\n}\n\nconst publicConfig = {} as any;\n\nclass Application extends App<IApp> {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({ Component, ctx }) {\n    // load configuration from ENV and put to config\n    if (!process.browser) {\n      // eslint-disable-next-line global-require\n      const dotenv = require('dotenv');\n      const myEnv = dotenv.config().parsed;\n      // publish to server config with app\n      setGlobalConfig(myEnv);\n\n      // load public config and api-endpoint?\n      Object.keys(myEnv).forEach((key) => {\n        if (key.indexOf('NEXT_PUBLIC_') === 0) {\n          publicConfig[key] = myEnv[key];\n        }\n      });\n    }\n    // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n    if (Component.authenticate !== false) {\n      await auth(ctx);\n    }\n    let settings = {};\n    if (!process.browser) {\n      const resp = await settingService.public();\n      // TODO encrypt, decypt header script, footer script or other info if needed\n      settings = resp?.data;\n      settings && await updateSettingsStore(ctx, settings);\n    }\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({ ctx });\n    }\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout,\n      config: publicConfig\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    setGlobalConfig(this.props.config);\n  }\n\n  render() {\n    const {\n      Component, pageProps, store, settings\n    } = this.props;\n    const { layout } = Component;\n    return (\n      <Provider store={store}>\n        <Head>\n          <title>{settings?.siteName}</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n        </Head>\n        <BaseLayout layout={layout}>\n          <Component {...pageProps} />\n        </BaseLayout>\n      </Provider>\n    );\n  }\n}\n\nexport default withReduxSaga(Application);\n"]},"metadata":{},"sourceType":"module"}