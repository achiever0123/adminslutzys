{"ast":null,"code":"var __jsx = React.createElement;\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport BaseLayout from '@layouts/base-layout';\nimport { authService, userService, setGlobalConfig, settingService } from '@services/index';\nimport Router from 'next/router';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport Head from 'next/head';\nimport '../style/index.less';\n\nfunction redirectLogin(ctx) {\n  if (false) {\n    authService.removeToken();\n    Router.push('/auth/login');\n    return;\n  } // fix for production build\n\n\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    Location: '/auth/login'\n  });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(ctx) {\n  try {\n    const {\n      store\n    } = ctx;\n    const state = store.getState();\n\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    } // TODO - move to a service\n\n\n    const {\n      token\n    } = nextCookie(ctx);\n\n    if (!token) {\n      // log out and redirect to login page\n      // TODO - reset app state?\n      redirectLogin(ctx);\n      return;\n    }\n\n    authService.setAuthHeaderToken(token);\n    const user = await userService.me({\n      Authorization: token\n    }); // TODO - check permission\n\n    if (user.data && !user.data.roles.includes('admin')) {\n      redirectLogin(ctx);\n      return;\n    }\n\n    store.dispatch(loginSuccess());\n    store.dispatch(updateCurrentUser(user.data));\n  } catch (e) {\n    redirectLogin(ctx);\n  }\n}\n\nasync function updateSettingsStore(ctx, settings) {\n  const {\n    store\n  } = ctx;\n  store.dispatch(updateUIValue({\n    logo: settings.logoUrl,\n    siteName: settings.siteName\n  }));\n}\n\nconst publicConfig = {};\n\nclass Application extends App {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // load configuration from ENV and put to config\n    if (!false) {\n      // eslint-disable-next-line global-require\n      const dotenv = require('dotenv');\n\n      const myEnv = dotenv.config().parsed; // publish to server config with app\n\n      setGlobalConfig(myEnv); // load public config and api-endpoint?\n\n      Object.keys(myEnv).forEach(key => {\n        if (key.indexOf('NEXT_PUBLIC_') === 0) {\n          publicConfig[key] = myEnv[key];\n        }\n      });\n    } // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n\n\n    if (Component.authenticate !== false) {\n      await auth(ctx);\n    }\n\n    let settings = {};\n\n    if (!false) {\n      const resp = await settingService.public(); // TODO encrypt, decypt header script, footer script or other info if needed\n\n      settings = resp === null || resp === void 0 ? void 0 : resp.data;\n      settings && (await updateSettingsStore(ctx, settings));\n    }\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({\n        ctx\n      });\n    }\n\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout,\n      config: publicConfig\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    setGlobalConfig(this.props.config);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store,\n      settings\n    } = this.props;\n    const {\n      layout\n    } = Component;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, settings === null || settings === void 0 ? void 0 : settings.siteName), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1, maximum-scale=1\"\n    })), __jsx(BaseLayout, {\n      layout: layout\n    }, __jsx(Component, pageProps)));\n  }\n\n}\n\nexport default withReduxSaga(Application);","map":{"version":3,"sources":["/Volumes/Chorus/__Code Source/Slutzys/creator site/admin/pages/_app.tsx"],"names":["App","React","Provider","nextCookie","withReduxSaga","BaseLayout","authService","userService","setGlobalConfig","settingService","Router","loginSuccess","updateCurrentUser","updateUIValue","Head","redirectLogin","ctx","removeToken","push","res","clearCookie","writeHead","Location","end","auth","store","state","getState","loggedIn","token","setAuthHeaderToken","user","me","Authorization","data","roles","includes","dispatch","e","updateSettingsStore","settings","logo","logoUrl","siteName","publicConfig","Application","getInitialProps","Component","dotenv","require","myEnv","config","parsed","Object","keys","forEach","key","indexOf","authenticate","resp","public","pageProps","layout","constructor","props","render"],"mappings":"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","sourcesContent":["import App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport { Store } from 'redux';\nimport BaseLayout from '@layouts/base-layout';\nimport {\n  authService, userService, setGlobalConfig, settingService\n} from '@services/index';\nimport Router from 'next/router';\nimport { NextPageContext } from 'next';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport Head from 'next/head';\nimport '../style/index.less';\n\nfunction redirectLogin(ctx: any) {\n  if (process.browser) {\n    authService.removeToken();\n    Router.push('/auth/login');\n    return;\n  }\n\n  // fix for production build\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/auth/login' });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(ctx: NextPageContext) {\n  try {\n    const { store } = ctx;\n    const state = store.getState();\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    }\n    // TODO - move to a service\n    const { token } = nextCookie(ctx);\n    if (!token) {\n      // log out and redirect to login page\n      // TODO - reset app state?\n      redirectLogin(ctx);\n      return;\n    }\n    authService.setAuthHeaderToken(token);\n    const user = await userService.me({\n      Authorization: token\n    });\n    // TODO - check permission\n    if (user.data && !user.data.roles.includes('admin')) {\n      redirectLogin(ctx);\n      return;\n    }\n    store.dispatch(loginSuccess());\n    store.dispatch(updateCurrentUser(user.data));\n  } catch (e) {\n    redirectLogin(ctx);\n  }\n}\n\nasync function updateSettingsStore(ctx: NextPageContext, settings) {\n  const { store } = ctx;\n  store.dispatch(\n    updateUIValue({\n      logo: settings.logoUrl,\n      siteName: settings.siteName\n    })\n  );\n}\n\ninterface AppComponent extends NextPageContext {\n  layout: string;\n}\n\ninterface IApp {\n  store: Store;\n  layout: string;\n  authenticate: boolean;\n  Component: AppComponent;\n  settings: any;\n  config: any;\n}\n\nconst publicConfig = {} as any;\n\nclass Application extends App<IApp> {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({ Component, ctx }) {\n    // load configuration from ENV and put to config\n    if (!process.browser) {\n      // eslint-disable-next-line global-require\n      const dotenv = require('dotenv');\n      const myEnv = dotenv.config().parsed;\n      // publish to server config with app\n      setGlobalConfig(myEnv);\n\n      // load public config and api-endpoint?\n      Object.keys(myEnv).forEach((key) => {\n        if (key.indexOf('NEXT_PUBLIC_') === 0) {\n          publicConfig[key] = myEnv[key];\n        }\n      });\n    }\n    // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n    if (Component.authenticate !== false) {\n      await auth(ctx);\n    }\n    let settings = {};\n    if (!process.browser) {\n      const resp = await settingService.public();\n      // TODO encrypt, decypt header script, footer script or other info if needed\n      settings = resp?.data;\n      settings && await updateSettingsStore(ctx, settings);\n    }\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({ ctx });\n    }\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout,\n      config: publicConfig\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    setGlobalConfig(this.props.config);\n  }\n\n  render() {\n    const {\n      Component, pageProps, store, settings\n    } = this.props;\n    const { layout } = Component;\n    return (\n      <Provider store={store}>\n        <Head>\n          <title>{settings?.siteName}</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n        </Head>\n        <BaseLayout layout={layout}>\n          <Component {...pageProps} />\n        </BaseLayout>\n      </Provider>\n    );\n  }\n}\n\nexport default withReduxSaga(Application);\n"]},"metadata":{},"sourceType":"module"}